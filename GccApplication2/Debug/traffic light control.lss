
traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000ce8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001197  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000825  00000000  00000000  00001fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fb  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000509  00000000  00000000  0000343c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000942  00000000  00000000  00003945  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004287  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <main>
  74:	0c 94 38 06 	jmp	0xc70	; 0xc70 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
# include "APP.h"
uint8_t INT0_Flag=0;

void APP_init(void){
	//initialize the pins , timer and the external interrupt
	DIO_init(D,2,IN);
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	62 e0       	ldi	r22, 0x02	; 2
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_init>
	LED_init(cars,RED_led);
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_init>
	LED_init(cars,YELLOW_led);
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_init>
	LED_init(cars,GREEN_led);
  96:	62 e0       	ldi	r22, 0x02	; 2
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_init>
	LED_init(pedestrian,RED_led);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_init>
	LED_init(pedestrian,YELLOW_led);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_init>
	LED_init(pedestrian,GREEN_led);
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_init>
	timer_init();
  b6:	0e 94 cc 03 	call	0x798	; 0x798 <timer_init>
	EXT_INT0_INIT();
  ba:	0e 94 c3 03 	call	0x786	; 0x786 <EXT_INT0_INIT>
  be:	08 95       	ret

000000c0 <APP_start>:
	
}
void APP_start(void){
	//1.normal mode
	// yellow car's light blink every 512ms for 5s 
	LED_blink(cars,YELLOW_led,512,5000);
  c0:	28 e8       	ldi	r18, 0x88	; 136
  c2:	33 e1       	ldi	r19, 0x13	; 19
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	52 e0       	ldi	r21, 0x02	; 2
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 76 01 	call	0x2ec	; 0x2ec <LED_blink>
	//if the int_flag equal to 1 change it's value to 0 and start from the beginning 
	if(INT0_Flag==0){
  d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	81 11       	cpse	r24, r1
  d6:	33 c0       	rjmp	.+102    	; 0x13e <APP_start+0x7e>
		//turn on the red car's led 
		LED_on_off(cars,RED_led,ON);
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//delay
		delay(5000);
  e2:	88 e8       	ldi	r24, 0x88	; 136
  e4:	93 e1       	ldi	r25, 0x13	; 19
  e6:	0e 94 cf 03 	call	0x79e	; 0x79e <delay>
		//turn off the red car's led
		LED_on_off(cars,RED_led,OFF);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//if the int_flag equal to 1 change it's value to 0 and start from the beginning
		if(INT0_Flag==0){
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f8:	81 11       	cpse	r24, r1
  fa:	1e c0       	rjmp	.+60     	; 0x138 <APP_start+0x78>
			//again the yellow car's led blink every 512ms for 5s
			LED_blink(cars,YELLOW_led,512,5000);
  fc:	28 e8       	ldi	r18, 0x88	; 136
  fe:	33 e1       	ldi	r19, 0x13	; 19
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	52 e0       	ldi	r21, 0x02	; 2
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 76 01 	call	0x2ec	; 0x2ec <LED_blink>
			//if the int_flag equal to 1 change it's value to 0 and start from the beginning
			if(INT0_Flag==0){
 10c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 110:	81 11       	cpse	r24, r1
 112:	0f c0       	rjmp	.+30     	; 0x132 <APP_start+0x72>
				//turn on the green car's led
				LED_on_off(cars,GREEN_led,ON);
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
				//delay for 5s
				delay(5000);
 11e:	88 e8       	ldi	r24, 0x88	; 136
 120:	93 e1       	ldi	r25, 0x13	; 19
 122:	0e 94 cf 03 	call	0x79e	; 0x79e <delay>
				//turn off the green car's led
				LED_on_off(cars,GREEN_led,OFF);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
 130:	08 95       	ret
				}else{
					//set the int_flag equal to 0
				INT0_Flag=0;
 132:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	08 95       	ret
			}
			}else{
				//set the int_flag equal to 0
			INT0_Flag=0;
 138:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	08 95       	ret
		}
		}else{
			//set the int_flag equal to 0
		INT0_Flag=0;
 13e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 142:	08 95       	ret

00000144 <__vector_1>:
	
	
}


ISR(EXT_INT_0){
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	//create a variable to save the value of the car's red led
	uint8_t redLedState;
	//read the state of car's red led and save it to the variable
	DIO_read(cars,RED_led,&redLedState);
 170:	ae 01       	movw	r20, r28
 172:	4f 5f       	subi	r20, 0xFF	; 255
 174:	5f 4f       	sbci	r21, 0xFF	; 255
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 13 03 	call	0x626	; 0x626 <DIO_read>
	//check if the red light is ON 
	if(redLedState==1){
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	d9 f5       	brne	.+118    	; 0x1fa <__vector_1+0xb6>
		//__in case the car's red led is ON
		//turn ON the car's red led and the pedestrian's green led
		LED_on_off(cars,RED_led,ON);
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		LED_on_off(pedestrian,GREEN_led,ON);
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//delay for 5s
		delay(5000);
 196:	88 e8       	ldi	r24, 0x88	; 136
 198:	93 e1       	ldi	r25, 0x13	; 19
 19a:	0e 94 cf 03 	call	0x79e	; 0x79e <delay>
		//turn off the car's red led
		LED_on_off(cars,RED_led,OFF);
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//the two yellow led start to blink for 5s
		TWOLED_blink(512,5000);
 1a8:	68 e8       	ldi	r22, 0x88	; 136
 1aa:	73 e1       	ldi	r23, 0x13	; 19
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	0e 94 b2 01 	call	0x364	; 0x364 <TWOLED_blink>
		//the pedestrian's green led is turned off
		LED_on_off(pedestrian,GREEN_led,OFF);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//the pedestrian's red led and the car's green led are turned ON
		LED_on_off(cars,GREEN_led,ON);
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		LED_on_off(pedestrian,RED_led,ON);
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//delay for 5s
		delay(5000);
 1d2:	88 e8       	ldi	r24, 0x88	; 136
 1d4:	93 e1       	ldi	r25, 0x13	; 19
 1d6:	0e 94 cf 03 	call	0x79e	; 0x79e <delay>
		//the pedestrian's red led and the car's green led are turned OFF
		LED_on_off(cars,GREEN_led,OFF);
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		LED_on_off(pedestrian,RED_led,OFF);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//set the INT0_Flag to 1 and start the timer
		INT0_Flag=1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		TCCR0=5;
 1f4:	85 e0       	ldi	r24, 0x05	; 5
 1f6:	83 bf       	out	0x33, r24	; 51
 1f8:	55 c0       	rjmp	.+170    	; 0x2a4 <__vector_1+0x160>
		}else{
			//__in case that the car's red led is off
			//make sure that the all car's led are OFF
		LED_on_off(cars,YELLOW_led,OFF);
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		LED_on_off(cars,GREEN_led,OFF);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//the pedestrian's red led is turned ON and the two yellow leds blink for 5s
		LED_on_off(pedestrian,RED_led,ON);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		TWOLED_blink(512,5000);
 218:	68 e8       	ldi	r22, 0x88	; 136
 21a:	73 e1       	ldi	r23, 0x13	; 19
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	0e 94 b2 01 	call	0x364	; 0x364 <TWOLED_blink>
		//the pedestrian's red led is turned off
		LED_on_off(pedestrian,RED_led,OFF);
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//the pedestrian's green led and the car's red led are turned ON
		LED_on_off(pedestrian,GREEN_led,ON);
 22e:	41 e0       	ldi	r20, 0x01	; 1
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		LED_on_off(cars,RED_led,ON);
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//delay for 5 seconds
		delay(5000);
 242:	88 e8       	ldi	r24, 0x88	; 136
 244:	93 e1       	ldi	r25, 0x13	; 19
 246:	0e 94 cf 03 	call	0x79e	; 0x79e <delay>
		//the car's red led is turned off
		LED_on_off(cars,RED_led,OFF);
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//the two yellow led blinks for 5s
		TWOLED_blink(512,5000);
 254:	68 e8       	ldi	r22, 0x88	; 136
 256:	73 e1       	ldi	r23, 0x13	; 19
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	0e 94 b2 01 	call	0x364	; 0x364 <TWOLED_blink>
		//the pedestrian' green led is turned off 
		LED_on_off(pedestrian,GREEN_led,OFF);
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//the pedestrian's red led and the car's green led turned ON
		LED_on_off(cars,GREEN_led,ON);
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	62 e0       	ldi	r22, 0x02	; 2
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		LED_on_off(pedestrian,RED_led,ON);
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		//delay for 5s
		delay(5000);
 27e:	88 e8       	ldi	r24, 0x88	; 136
 280:	93 e1       	ldi	r25, 0x13	; 19
 282:	0e 94 cf 03 	call	0x79e	; 0x79e <delay>
		//the pedestrian's red led and the car's green led turned OFF
		LED_on_off(cars,GREEN_led,OFF);
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	62 e0       	ldi	r22, 0x02	; 2
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		LED_on_off(pedestrian,RED_led,OFF);
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
		// set INT0_Flag to 1 and starts the timer 
		INT0_Flag=1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		TCCR0=5;
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	83 bf       	out	0x33, r24	; 51
		
	}
	
	
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <LED_init>:

#include"LED.h"

EN_LEDERROR_t LED_init(uint8_t portNumber,uint8_t pinNumber){
	//use DIO_init to initialize the LED
	if(DIO_init(portNumber,pinNumber,OUT)==0){
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_init>
 2d2:	81 11       	cpse	r24, r1
		return LED_OK;
	}else{
		return init_ERROR;
 2d4:	82 e0       	ldi	r24, 0x02	; 2
	}
}
 2d6:	08 95       	ret

000002d8 <LED_on_off>:
EN_LEDERROR_t LED_on_off(uint8_t portNumber,uint8_t pinNumber,uint8_t state){
	//use DIO_write to turn the LED ON or OFF
	if(DIO_write(portNumber,pinNumber,state)==0){
 2d8:	0e 94 89 02 	call	0x512	; 0x512 <DIO_write>
 2dc:	81 11       	cpse	r24, r1
		return LED_OK;
	}else{
		return ON_OFF_ERROR;
 2de:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 2e0:	08 95       	ret

000002e2 <LED_toggle>:
EN_LEDERROR_t LED_toggle(uint8_t portNumber,uint8_t pinNumber){
	//use DIO_Toggle to toggle the LED
	if(DIO_toggle(portNumber,pinNumber)==0){
 2e2:	0e 94 82 03 	call	0x704	; 0x704 <DIO_toggle>
 2e6:	81 11       	cpse	r24, r1
		return LED_OK;
	}else{
			return toggle_ERROR;
 2e8:	83 e0       	ldi	r24, 0x03	; 3
		}
}
 2ea:	08 95       	ret

000002ec <LED_blink>:
EN_LEDERROR_t LED_blink(uint8_t portNumber, uint8_t pinNumber, int delayTime,int wholeTime){
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	f8 2e       	mov	r15, r24
 2fe:	e6 2e       	mov	r14, r22
 300:	8a 01       	movw	r16, r20
 302:	69 01       	movw	r12, r18
	//create variable that save the passed time and another one that saves the number of toggles done
	int passedTime=0,numberOfToggles=0;
 304:	c0 e0       	ldi	r28, 0x00	; 0
 306:	d0 e0       	ldi	r29, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
		//loop that toggle the led after each delayTime
	while(passedTime<wholeTime){
 30c:	13 c0       	rjmp	.+38     	; 0x334 <LED_blink+0x48>
		//toggle the led
		if(LED_toggle(portNumber,pinNumber)!=0){
 30e:	6e 2d       	mov	r22, r14
 310:	8f 2d       	mov	r24, r15
 312:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_toggle>
 316:	81 11       	cpse	r24, r1
 318:	19 c0       	rjmp	.+50     	; 0x34c <LED_blink+0x60>
			return blink_ERROR;
		}
		//delay
		if(delay(delayTime)!=0){
 31a:	c8 01       	movw	r24, r16
 31c:	0e 94 cf 03 	call	0x79e	; 0x79e <delay>
 320:	81 11       	cpse	r24, r1
 322:	16 c0       	rjmp	.+44     	; 0x350 <LED_blink+0x64>
			return blink_ERROR;
		}
		//increment numberOfToggles and calculate the time passed
		numberOfToggles++;
 324:	21 96       	adiw	r28, 0x01	; 1
		passedTime=numberOfToggles*delayTime;
 326:	0c 9f       	mul	r16, r28
 328:	c0 01       	movw	r24, r0
 32a:	0d 9f       	mul	r16, r29
 32c:	90 0d       	add	r25, r0
 32e:	1c 9f       	mul	r17, r28
 330:	90 0d       	add	r25, r0
 332:	11 24       	eor	r1, r1
}
EN_LEDERROR_t LED_blink(uint8_t portNumber, uint8_t pinNumber, int delayTime,int wholeTime){
	//create variable that save the passed time and another one that saves the number of toggles done
	int passedTime=0,numberOfToggles=0;
		//loop that toggle the led after each delayTime
	while(passedTime<wholeTime){
 334:	8c 15       	cp	r24, r12
 336:	9d 05       	cpc	r25, r13
 338:	54 f3       	brlt	.-44     	; 0x30e <LED_blink+0x22>
		//increment numberOfToggles and calculate the time passed
		numberOfToggles++;
		passedTime=numberOfToggles*delayTime;
	}
	//make sure that the led is off after the loop
	if(LED_on_off(portNumber,pinNumber,OFF)!=0){
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	6e 2d       	mov	r22, r14
 33e:	8f 2d       	mov	r24, r15
 340:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
 344:	88 23       	and	r24, r24
 346:	29 f0       	breq	.+10     	; 0x352 <LED_blink+0x66>
		return blink_ERROR;
 348:	84 e0       	ldi	r24, 0x04	; 4
 34a:	03 c0       	rjmp	.+6      	; 0x352 <LED_blink+0x66>
	int passedTime=0,numberOfToggles=0;
		//loop that toggle the led after each delayTime
	while(passedTime<wholeTime){
		//toggle the led
		if(LED_toggle(portNumber,pinNumber)!=0){
			return blink_ERROR;
 34c:	84 e0       	ldi	r24, 0x04	; 4
 34e:	01 c0       	rjmp	.+2      	; 0x352 <LED_blink+0x66>
		}
		//delay
		if(delay(delayTime)!=0){
			return blink_ERROR;
 350:	84 e0       	ldi	r24, 0x04	; 4
	//make sure that the led is off after the loop
	if(LED_on_off(portNumber,pinNumber,OFF)!=0){
		return blink_ERROR;
	}
	return LED_OK;
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	08 95       	ret

00000364 <TWOLED_blink>:
EN_LEDERROR_t TWOLED_blink(int delayTime,int wholeTime){
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	8c 01       	movw	r16, r24
 372:	7b 01       	movw	r14, r22
	//create variable that save the passed time and another one that saves the number of toggles done
	int passedTime=0,numberOfToggles=0;
 374:	c0 e0       	ldi	r28, 0x00	; 0
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
	//loop that toggle the led after each delayTime
	while(passedTime<wholeTime){
 37c:	19 c0       	rjmp	.+50     	; 0x3b0 <TWOLED_blink+0x4c>
		//toggle the leds
		if(LED_toggle(A,1)!=0||LED_toggle(B,1)!=0){
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_toggle>
 386:	81 11       	cpse	r24, r1
 388:	25 c0       	rjmp	.+74     	; 0x3d4 <TWOLED_blink+0x70>
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_toggle>
 392:	81 11       	cpse	r24, r1
 394:	21 c0       	rjmp	.+66     	; 0x3d8 <TWOLED_blink+0x74>
			return blink_ERROR;
		}
		//delay
		if(delay(delayTime)!=0){
 396:	c8 01       	movw	r24, r16
 398:	0e 94 cf 03 	call	0x79e	; 0x79e <delay>
 39c:	81 11       	cpse	r24, r1
 39e:	1e c0       	rjmp	.+60     	; 0x3dc <TWOLED_blink+0x78>
			return blink_ERROR;
		}
		//increment numberOfToggle and calculate the time passed
		numberOfToggles++;
 3a0:	21 96       	adiw	r28, 0x01	; 1
		passedTime=numberOfToggles*delayTime;
 3a2:	0c 9f       	mul	r16, r28
 3a4:	c0 01       	movw	r24, r0
 3a6:	0d 9f       	mul	r16, r29
 3a8:	90 0d       	add	r25, r0
 3aa:	1c 9f       	mul	r17, r28
 3ac:	90 0d       	add	r25, r0
 3ae:	11 24       	eor	r1, r1
}
EN_LEDERROR_t TWOLED_blink(int delayTime,int wholeTime){
	//create variable that save the passed time and another one that saves the number of toggles done
	int passedTime=0,numberOfToggles=0;
	//loop that toggle the led after each delayTime
	while(passedTime<wholeTime){
 3b0:	8e 15       	cp	r24, r14
 3b2:	9f 05       	cpc	r25, r15
 3b4:	24 f3       	brlt	.-56     	; 0x37e <TWOLED_blink+0x1a>
		//increment numberOfToggle and calculate the time passed
		numberOfToggles++;
		passedTime=numberOfToggles*delayTime;
	}
	//make sure that the leds are off after the loop
	if(LED_on_off(A,1,OFF)!=0||LED_on_off(B,1,OFF)){
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
 3c0:	81 11       	cpse	r24, r1
 3c2:	0e c0       	rjmp	.+28     	; 0x3e0 <TWOLED_blink+0x7c>
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_on_off>
 3ce:	81 11       	cpse	r24, r1
 3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <TWOLED_blink+0x80>
 3d2:	09 c0       	rjmp	.+18     	; 0x3e6 <TWOLED_blink+0x82>
	int passedTime=0,numberOfToggles=0;
	//loop that toggle the led after each delayTime
	while(passedTime<wholeTime){
		//toggle the leds
		if(LED_toggle(A,1)!=0||LED_toggle(B,1)!=0){
			return blink_ERROR;
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <TWOLED_blink+0x82>
 3d8:	84 e0       	ldi	r24, 0x04	; 4
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <TWOLED_blink+0x82>
		}
		//delay
		if(delay(delayTime)!=0){
			return blink_ERROR;
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <TWOLED_blink+0x82>
		numberOfToggles++;
		passedTime=numberOfToggles*delayTime;
	}
	//make sure that the leds are off after the loop
	if(LED_on_off(A,1,OFF)!=0||LED_on_off(B,1,OFF)){
		return blink_ERROR;
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <TWOLED_blink+0x82>
 3e4:	84 e0       	ldi	r24, 0x04	; 4
	}
	return LED_OK;
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	ff 90       	pop	r15
 3f0:	ef 90       	pop	r14
 3f2:	08 95       	ret

000003f4 <main>:
#include "Application/APP.h"
extern uint8_t INT0_Flag;
int main(void)
{
    /* Replace with your application code */
	APP_init();
 3f4:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
    while (1) 
    {
		APP_start();
 3f8:	0e 94 60 00 	call	0xc0	; 0xc0 <APP_start>
 3fc:	fd cf       	rjmp	.-6      	; 0x3f8 <main+0x4>

000003fe <DIO_init>:
 */ 
#include"DIO.h"

EN_DIOERROR_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction){
	//make sure that pinNumber is less than 7 and if it is bigger return error
	if(pinNumber>7){
 3fe:	68 30       	cpi	r22, 0x08	; 8
 400:	08 f0       	brcs	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	7f c0       	rjmp	.+254    	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
		return pinNumber_ERROR;
	}
	//check for the direction (IN or OUT)
	if(direction==IN){
 404:	41 11       	cpse	r20, r1
 406:	3f c0       	rjmp	.+126    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		//in case of (IN) check the portNumber
		switch(portNumber){
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	b1 f0       	breq	.+44     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 40c:	18 f4       	brcc	.+6      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	31 f0       	breq	.+12     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 412:	79 c0       	rjmp	.+242    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 414:	83 30       	cpi	r24, 0x03	; 3
 416:	e9 f0       	breq	.+58     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 418:	84 30       	cpi	r24, 0x04	; 4
 41a:	41 f1       	breq	.+80     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 41c:	74 c0       	rjmp	.+232    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
            //in the DDR register of the PORT set the pinNumber bit to 0 & return DIO_OK
			case A:
			DDRA &= ~(1<<pinNumber);
 41e:	2a b3       	in	r18, 0x1a	; 26
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	80 95       	com	r24
 430:	82 23       	and	r24, r18
 432:	8a bb       	out	0x1a, r24	; 26
			return DIO_OK;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	08 95       	ret
			break;
			case B:
			DDRB &= ~(1<<pinNumber);
 438:	27 b3       	in	r18, 0x17	; 23
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	80 95       	com	r24
 44a:	82 23       	and	r24, r18
 44c:	87 bb       	out	0x17, r24	; 23
			return DIO_OK;
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret
			break;
			case C:
			DDRC &= ~(1<<pinNumber);
 452:	24 b3       	in	r18, 0x14	; 20
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	80 95       	com	r24
 464:	82 23       	and	r24, r18
 466:	84 bb       	out	0x14, r24	; 20
			return DIO_OK;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	08 95       	ret
			break;
			case D:
			DDRD &= ~(1<<pinNumber);
 46c:	21 b3       	in	r18, 0x11	; 17
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 47c:	80 95       	com	r24
 47e:	82 23       	and	r24, r18
 480:	81 bb       	out	0x11, r24	; 17
			return DIO_OK;
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 95       	ret
			//if the portNumber isn't exist return ERROR
			default:
			return portNumber_ERROR;
			break;
		}
		}else if(direction==OUT){
 486:	41 30       	cpi	r20, 0x01	; 1
 488:	09 f0       	breq	.+2      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 48a:	3f c0       	rjmp	.+126    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
			//in case of (OUT) check the portNumber
		switch(portNumber){
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	a9 f0       	breq	.+42     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 490:	18 f4       	brcc	.+6      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	31 f0       	breq	.+12     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 496:	3b c0       	rjmp	.+118    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 498:	83 30       	cpi	r24, 0x03	; 3
 49a:	d9 f0       	breq	.+54     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 49c:	84 30       	cpi	r24, 0x04	; 4
 49e:	29 f1       	breq	.+74     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4a0:	36 c0       	rjmp	.+108    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
			//in the register of PORT set the pinNumber bit to 1 & return DIO_OK
			case A:
			DDRA |= (1<<pinNumber);
 4a2:	2a b3       	in	r18, 0x1a	; 26
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4b2:	82 2b       	or	r24, r18
 4b4:	8a bb       	out	0x1a, r24	; 26
			return DIO_OK;
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	08 95       	ret
			break;
			case B:
			DDRB |= (1<<pinNumber);
 4ba:	27 b3       	in	r18, 0x17	; 23
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4ca:	82 2b       	or	r24, r18
 4cc:	87 bb       	out	0x17, r24	; 23
			return DIO_OK;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
			break;
			case C:
			DDRC |= (1<<pinNumber);
 4d2:	24 b3       	in	r18, 0x14	; 20
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4e2:	82 2b       	or	r24, r18
 4e4:	84 bb       	out	0x14, r24	; 20
			return DIO_OK;
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
			break;
			case D:
			DDRD |= (1<<pinNumber);
 4ea:	21 b3       	in	r18, 0x11	; 17
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4fa:	82 2b       	or	r24, r18
 4fc:	81 bb       	out	0x11, r24	; 17
			return DIO_OK;
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
#include"DIO.h"

EN_DIOERROR_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction){
	//make sure that pinNumber is less than 7 and if it is bigger return error
	if(pinNumber>7){
		return pinNumber_ERROR;
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	08 95       	ret
			DDRD &= ~(1<<pinNumber);
			return DIO_OK;
			break;
			//if the portNumber isn't exist return ERROR
			default:
			return portNumber_ERROR;
 506:	84 e0       	ldi	r24, 0x04	; 4
 508:	08 95       	ret
			break;
		}
		
	}else{
		//return direction error if the direction is not IN or OUT
		return direction_ERROR;
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	08 95       	ret
			DDRD |= (1<<pinNumber);
			return DIO_OK;
			break;
			//if the portNumber isn't exist return ERROR
			default:
			return portNumber_ERROR;
 50e:	84 e0       	ldi	r24, 0x04	; 4
		
	}else{
		//return direction error if the direction is not IN or OUT
		return direction_ERROR;
	}
}
 510:	08 95       	ret

00000512 <DIO_write>:
EN_DIOERROR_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	//make sure that pinNumber is less than 7 and if it is bigger return error
	if(pinNumber>7){
 512:	68 30       	cpi	r22, 0x08	; 8
 514:	08 f0       	brcs	.+2      	; 0x518 <DIO_write+0x6>
 516:	7f c0       	rjmp	.+254    	; 0x616 <DIO_write+0x104>
		return pinNumber_ERROR;
	}
	//check the value (LOW or HIgh)
	if(value==LOW){
 518:	41 11       	cpse	r20, r1
 51a:	3f c0       	rjmp	.+126    	; 0x59a <DIO_write+0x88>
		//if the value is LOW check the portNumber
		switch(portNumber){
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	b1 f0       	breq	.+44     	; 0x54c <DIO_write+0x3a>
 520:	18 f4       	brcc	.+6      	; 0x528 <DIO_write+0x16>
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	31 f0       	breq	.+12     	; 0x532 <DIO_write+0x20>
 526:	79 c0       	rjmp	.+242    	; 0x61a <DIO_write+0x108>
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	e9 f0       	breq	.+58     	; 0x566 <DIO_write+0x54>
 52c:	84 30       	cpi	r24, 0x04	; 4
 52e:	41 f1       	breq	.+80     	; 0x580 <DIO_write+0x6e>
 530:	74 c0       	rjmp	.+232    	; 0x61a <DIO_write+0x108>
			//in the PORT register of the portNumber set the pinNumber bit to 0 & return DIO_OK
			case A:
			PORTA &= ~(1<<pinNumber);
 532:	2b b3       	in	r18, 0x1b	; 27
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_write+0x2c>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_write+0x28>
 542:	80 95       	com	r24
 544:	82 23       	and	r24, r18
 546:	8b bb       	out	0x1b, r24	; 27
			return DIO_OK;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	08 95       	ret
			break;
			case B:
			PORTB &= ~(1<<pinNumber);
 54c:	28 b3       	in	r18, 0x18	; 24
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_write+0x46>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_write+0x42>
 55c:	80 95       	com	r24
 55e:	82 23       	and	r24, r18
 560:	88 bb       	out	0x18, r24	; 24
			return DIO_OK;
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret
			break;
			case C:
			PORTC &= ~(1<<pinNumber);
 566:	25 b3       	in	r18, 0x15	; 21
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_write+0x60>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_write+0x5c>
 576:	80 95       	com	r24
 578:	82 23       	and	r24, r18
 57a:	85 bb       	out	0x15, r24	; 21
			return DIO_OK;
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	08 95       	ret
			break;
			case D:
			PORTD &= ~(1<<pinNumber);
 580:	22 b3       	in	r18, 0x12	; 18
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_write+0x7a>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_write+0x76>
 590:	80 95       	com	r24
 592:	82 23       	and	r24, r18
 594:	82 bb       	out	0x12, r24	; 18
			return DIO_OK;
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	08 95       	ret
			//if the portNumber isn't found return error
			default:
			return portNumber_ERROR;
			break;
		}
		}else if(value==HIGH){
 59a:	41 30       	cpi	r20, 0x01	; 1
 59c:	09 f0       	breq	.+2      	; 0x5a0 <DIO_write+0x8e>
 59e:	3f c0       	rjmp	.+126    	; 0x61e <DIO_write+0x10c>
			//if the value is HIGH check the portNumber
		switch(portNumber){
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	a9 f0       	breq	.+42     	; 0x5ce <DIO_write+0xbc>
 5a4:	18 f4       	brcc	.+6      	; 0x5ac <DIO_write+0x9a>
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	31 f0       	breq	.+12     	; 0x5b6 <DIO_write+0xa4>
 5aa:	3b c0       	rjmp	.+118    	; 0x622 <DIO_write+0x110>
 5ac:	83 30       	cpi	r24, 0x03	; 3
 5ae:	d9 f0       	breq	.+54     	; 0x5e6 <DIO_write+0xd4>
 5b0:	84 30       	cpi	r24, 0x04	; 4
 5b2:	29 f1       	breq	.+74     	; 0x5fe <DIO_write+0xec>
 5b4:	36 c0       	rjmp	.+108    	; 0x622 <DIO_write+0x110>
			//in the PORT register of the portNumber set the pinNumber bit to 1 & return DIO_OK
			case A:
			PORTA |= (1<<pinNumber);
 5b6:	2b b3       	in	r18, 0x1b	; 27
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_write+0xb0>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	6a 95       	dec	r22
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_write+0xac>
 5c6:	82 2b       	or	r24, r18
 5c8:	8b bb       	out	0x1b, r24	; 27
			return DIO_OK;
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	08 95       	ret
			break;
			case B:
			PORTB |= (1<<pinNumber);
 5ce:	28 b3       	in	r18, 0x18	; 24
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_write+0xc8>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_write+0xc4>
 5de:	82 2b       	or	r24, r18
 5e0:	88 bb       	out	0x18, r24	; 24
			return DIO_OK;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret
			break;
			case C:
			PORTC |= (1<<pinNumber);
 5e6:	25 b3       	in	r18, 0x15	; 21
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_write+0xe0>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_write+0xdc>
 5f6:	82 2b       	or	r24, r18
 5f8:	85 bb       	out	0x15, r24	; 21
			return DIO_OK;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	08 95       	ret
			break;
			case D:
			PORTD |= (1<<pinNumber);
 5fe:	22 b3       	in	r18, 0x12	; 18
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_write+0xf8>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_write+0xf4>
 60e:	82 2b       	or	r24, r18
 610:	82 bb       	out	0x12, r24	; 18
			return DIO_OK;
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	08 95       	ret
	}
}
EN_DIOERROR_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	//make sure that pinNumber is less than 7 and if it is bigger return error
	if(pinNumber>7){
		return pinNumber_ERROR;
 616:	83 e0       	ldi	r24, 0x03	; 3
 618:	08 95       	ret
			PORTD &= ~(1<<pinNumber);
			return DIO_OK;
			break;
			//if the portNumber isn't found return error
			default:
			return portNumber_ERROR;
 61a:	84 e0       	ldi	r24, 0x04	; 4
 61c:	08 95       	ret
			break;
		}
		
	}else{
		//else return ERROR
		return value_ERROR;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	08 95       	ret
			PORTD |= (1<<pinNumber);
			return DIO_OK;
			break;
			//if the portNumber isn't found, return ERROR
			default:
			return portNumber_ERROR;
 622:	84 e0       	ldi	r24, 0x04	; 4
	}else{
		//else return ERROR
		return value_ERROR;
	}
	
}
 624:	08 95       	ret

00000626 <DIO_read>:
EN_DIOERROR_t DIO_read( uint8_t portNumber, uint8_t pinNumber, uint8_t *value){
	
	//make sure that pinNumber is less than 7 and if it is bigger return error
	if(pinNumber>7){
 626:	68 30       	cpi	r22, 0x08	; 8
 628:	08 f0       	brcs	.+2      	; 0x62c <DIO_read+0x6>
 62a:	68 c0       	rjmp	.+208    	; 0x6fc <DIO_read+0xd6>
		return pinNumber_ERROR;
	}
	
	//check the portNumber  and pinNubmer
	switch(portNumber){
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	09 f1       	breq	.+66     	; 0x672 <DIO_read+0x4c>
 630:	18 f4       	brcc	.+6      	; 0x638 <DIO_read+0x12>
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	39 f0       	breq	.+14     	; 0x644 <DIO_read+0x1e>
 636:	64 c0       	rjmp	.+200    	; 0x700 <DIO_read+0xda>
 638:	83 30       	cpi	r24, 0x03	; 3
 63a:	91 f1       	breq	.+100    	; 0x6a0 <DIO_read+0x7a>
 63c:	84 30       	cpi	r24, 0x04	; 4
 63e:	09 f4       	brne	.+2      	; 0x642 <DIO_read+0x1c>
 640:	46 c0       	rjmp	.+140    	; 0x6ce <DIO_read+0xa8>
 642:	5e c0       	rjmp	.+188    	; 0x700 <DIO_read+0xda>
		//in the PIN register of portNumber read the pinNumber bit and save the result in a pointer & return DIO_OK
		case A:
		*value=(PINA & (1<<pinNumber))>>pinNumber;
 644:	79 b3       	in	r23, 0x19	; 25
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	9c 01       	movw	r18, r24
 64c:	06 2e       	mov	r0, r22
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_read+0x2e>
 650:	22 0f       	add	r18, r18
 652:	33 1f       	adc	r19, r19
 654:	0a 94       	dec	r0
 656:	e2 f7       	brpl	.-8      	; 0x650 <DIO_read+0x2a>
 658:	87 2f       	mov	r24, r23
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	82 23       	and	r24, r18
 65e:	93 23       	and	r25, r19
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_read+0x40>
 662:	95 95       	asr	r25
 664:	87 95       	ror	r24
 666:	6a 95       	dec	r22
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_read+0x3c>
 66a:	fa 01       	movw	r30, r20
 66c:	80 83       	st	Z, r24
		return DIO_OK;
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	08 95       	ret
		break;
		case B:
		*value=(PINB & (1<<pinNumber))>>pinNumber;
 672:	76 b3       	in	r23, 0x16	; 22
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	9c 01       	movw	r18, r24
 67a:	06 2e       	mov	r0, r22
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_read+0x5c>
 67e:	22 0f       	add	r18, r18
 680:	33 1f       	adc	r19, r19
 682:	0a 94       	dec	r0
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_read+0x58>
 686:	87 2f       	mov	r24, r23
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	82 23       	and	r24, r18
 68c:	93 23       	and	r25, r19
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_read+0x6e>
 690:	95 95       	asr	r25
 692:	87 95       	ror	r24
 694:	6a 95       	dec	r22
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_read+0x6a>
 698:	fa 01       	movw	r30, r20
 69a:	80 83       	st	Z, r24
		return DIO_OK;
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	08 95       	ret
		break;
		case C:
		*value=(PINC & (1<<pinNumber))>>pinNumber;
 6a0:	73 b3       	in	r23, 0x13	; 19
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	9c 01       	movw	r18, r24
 6a8:	06 2e       	mov	r0, r22
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_read+0x8a>
 6ac:	22 0f       	add	r18, r18
 6ae:	33 1f       	adc	r19, r19
 6b0:	0a 94       	dec	r0
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_read+0x86>
 6b4:	87 2f       	mov	r24, r23
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	82 23       	and	r24, r18
 6ba:	93 23       	and	r25, r19
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_read+0x9c>
 6be:	95 95       	asr	r25
 6c0:	87 95       	ror	r24
 6c2:	6a 95       	dec	r22
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_read+0x98>
 6c6:	fa 01       	movw	r30, r20
 6c8:	80 83       	st	Z, r24
		return DIO_OK;
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	08 95       	ret
		break;
		case D:
		*value=(PIND & (1<<pinNumber))>>pinNumber;
 6ce:	70 b3       	in	r23, 0x10	; 16
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	9c 01       	movw	r18, r24
 6d6:	06 2e       	mov	r0, r22
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_read+0xb8>
 6da:	22 0f       	add	r18, r18
 6dc:	33 1f       	adc	r19, r19
 6de:	0a 94       	dec	r0
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_read+0xb4>
 6e2:	87 2f       	mov	r24, r23
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	82 23       	and	r24, r18
 6e8:	93 23       	and	r25, r19
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_read+0xca>
 6ec:	95 95       	asr	r25
 6ee:	87 95       	ror	r24
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_read+0xc6>
 6f4:	fa 01       	movw	r30, r20
 6f6:	80 83       	st	Z, r24
		return DIO_OK;
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	08 95       	ret
}
EN_DIOERROR_t DIO_read( uint8_t portNumber, uint8_t pinNumber, uint8_t *value){
	
	//make sure that pinNumber is less than 7 and if it is bigger return error
	if(pinNumber>7){
		return pinNumber_ERROR;
 6fc:	83 e0       	ldi	r24, 0x03	; 3
 6fe:	08 95       	ret
		*value=(PIND & (1<<pinNumber))>>pinNumber;
		return DIO_OK;
		break;
		//if the portNumber is not found return ERROR  
		default:
		return portNumber_ERROR;
 700:	84 e0       	ldi	r24, 0x04	; 4
		break;
	}
	
}
 702:	08 95       	ret

00000704 <DIO_toggle>:
EN_DIOERROR_t DIO_toggle(uint8_t portNumber,uint8_t pinNumber){
	//check the portNumber and pinNumber
	//make sure that pinNumber is less than 7 and if it is bigger return error
	if(pinNumber>7){
 704:	68 30       	cpi	r22, 0x08	; 8
 706:	d8 f5       	brcc	.+118    	; 0x77e <DIO_toggle+0x7a>
		return pinNumber_ERROR;
	}
	switch(portNumber){
 708:	82 30       	cpi	r24, 0x02	; 2
 70a:	a9 f0       	breq	.+42     	; 0x736 <DIO_toggle+0x32>
 70c:	18 f4       	brcc	.+6      	; 0x714 <DIO_toggle+0x10>
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	31 f0       	breq	.+12     	; 0x71e <DIO_toggle+0x1a>
 712:	37 c0       	rjmp	.+110    	; 0x782 <DIO_toggle+0x7e>
 714:	83 30       	cpi	r24, 0x03	; 3
 716:	d9 f0       	breq	.+54     	; 0x74e <DIO_toggle+0x4a>
 718:	84 30       	cpi	r24, 0x04	; 4
 71a:	29 f1       	breq	.+74     	; 0x766 <DIO_toggle+0x62>
 71c:	32 c0       	rjmp	.+100    	; 0x782 <DIO_toggle+0x7e>
		//if the pinNumber bit in the PORT register of the portNumber is 1 change it to 0 and vice versa
		case A:
		PORTA ^= (1<<pinNumber);
 71e:	2b b3       	in	r18, 0x1b	; 27
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_toggle+0x26>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	6a 95       	dec	r22
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_toggle+0x22>
 72e:	82 27       	eor	r24, r18
 730:	8b bb       	out	0x1b, r24	; 27
		return DIO_OK;
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	08 95       	ret
		break;
		case B:
		PORTB ^= (1<<pinNumber);
 736:	28 b3       	in	r18, 0x18	; 24
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_toggle+0x3e>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	6a 95       	dec	r22
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_toggle+0x3a>
 746:	82 27       	eor	r24, r18
 748:	88 bb       	out	0x18, r24	; 24
		return DIO_OK;
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	08 95       	ret
		break;
		case C:
		PORTC ^= (1<<pinNumber);
 74e:	25 b3       	in	r18, 0x15	; 21
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_toggle+0x56>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	6a 95       	dec	r22
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_toggle+0x52>
 75e:	82 27       	eor	r24, r18
 760:	85 bb       	out	0x15, r24	; 21
		return DIO_OK;
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	08 95       	ret
		break;
		case D:
		PORTD ^= (1<<pinNumber);
 766:	22 b3       	in	r18, 0x12	; 18
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_toggle+0x6e>
 76e:	88 0f       	add	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	6a 95       	dec	r22
 774:	e2 f7       	brpl	.-8      	; 0x76e <DIO_toggle+0x6a>
 776:	82 27       	eor	r24, r18
 778:	82 bb       	out	0x12, r24	; 18
		return DIO_OK;
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	08 95       	ret
}
EN_DIOERROR_t DIO_toggle(uint8_t portNumber,uint8_t pinNumber){
	//check the portNumber and pinNumber
	//make sure that pinNumber is less than 7 and if it is bigger return error
	if(pinNumber>7){
		return pinNumber_ERROR;
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	08 95       	ret
		case D:
		PORTD ^= (1<<pinNumber);
		return DIO_OK;
		break;
		default:
		return portNumber_ERROR;
 782:	84 e0       	ldi	r24, 0x04	; 4
		break;
	}
}
 784:	08 95       	ret

00000786 <EXT_INT0_INIT>:
void EXT_INT0_INIT(void){
	//enable the global interrupt
	SREG |= (1<<7);
 786:	8f b7       	in	r24, 0x3f	; 63
 788:	80 68       	ori	r24, 0x80	; 128
 78a:	8f bf       	out	0x3f, r24	; 63
	MCUCR=3;
 78c:	83 e0       	ldi	r24, 0x03	; 3
 78e:	85 bf       	out	0x35, r24	; 53
	//enable the external INT0
	GICR |= (1<<6);
 790:	8b b7       	in	r24, 0x3b	; 59
 792:	80 64       	ori	r24, 0x40	; 64
 794:	8b bf       	out	0x3b, r24	; 59
 796:	08 95       	ret

00000798 <timer_init>:
#include<math.h>
#include"Timer.h"
extern uint8_t INT0_Flag;
void timer_init(void){
	//choose timer mode
	TCCR0=0x00;
 798:	13 be       	out	0x33, r1	; 51
	//timer set initial value
	TCNT0=0x00;
 79a:	12 be       	out	0x32, r1	; 50
 79c:	08 95       	ret

0000079e <delay>:
}
uint8_t delay(int delayTime){
 79e:	8f 92       	push	r8
 7a0:	9f 92       	push	r9
 7a2:	af 92       	push	r10
 7a4:	bf 92       	push	r11
 7a6:	cf 92       	push	r12
 7a8:	df 92       	push	r13
 7aa:	ef 92       	push	r14
 7ac:	ff 92       	push	r15
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
	//create  variables needed for delay calculations
	float maxDelay,tickTime;
	int timerIntialValue,numberOfOverFlowes, overFlowCounter=0;
	 tickTime =(1024/pow(10,6))*1000;
	 maxDelay = tickTime*256;
	 numberOfOverFlowes= ceil(delayTime/maxDelay);
 7b2:	bc 01       	movw	r22, r24
 7b4:	99 0f       	add	r25, r25
 7b6:	88 0b       	sbc	r24, r24
 7b8:	99 0b       	sbc	r25, r25
 7ba:	0e 94 6b 05 	call	0xad6	; 0xad6 <__floatsisf>
 7be:	4b 01       	movw	r8, r22
 7c0:	5c 01       	movw	r10, r24
 7c2:	2f e6       	ldi	r18, 0x6F	; 111
 7c4:	32 e1       	ldi	r19, 0x12	; 18
 7c6:	43 e8       	ldi	r20, 0x83	; 131
 7c8:	53 e4       	ldi	r21, 0x43	; 67
 7ca:	0e 94 c1 04 	call	0x982	; 0x982 <__divsf3>
 7ce:	0e 94 aa 04 	call	0x954	; 0x954 <ceil>
 7d2:	0e 94 33 05 	call	0xa66	; 0xa66 <__fixsfsi>
 7d6:	6b 01       	movw	r12, r22
 7d8:	7c 01       	movw	r14, r24
 7da:	eb 01       	movw	r28, r22
	 timerIntialValue = 256-((delayTime/tickTime)/numberOfOverFlowes);
 7dc:	2f e6       	ldi	r18, 0x6F	; 111
 7de:	32 e1       	ldi	r19, 0x12	; 18
 7e0:	43 e8       	ldi	r20, 0x83	; 131
 7e2:	5f e3       	ldi	r21, 0x3F	; 63
 7e4:	c5 01       	movw	r24, r10
 7e6:	b4 01       	movw	r22, r8
 7e8:	0e 94 c1 04 	call	0x982	; 0x982 <__divsf3>
 7ec:	4b 01       	movw	r8, r22
 7ee:	5c 01       	movw	r10, r24
 7f0:	b6 01       	movw	r22, r12
 7f2:	dd 0c       	add	r13, r13
 7f4:	88 0b       	sbc	r24, r24
 7f6:	99 0b       	sbc	r25, r25
 7f8:	0e 94 6b 05 	call	0xad6	; 0xad6 <__floatsisf>
 7fc:	9b 01       	movw	r18, r22
 7fe:	ac 01       	movw	r20, r24
 800:	c5 01       	movw	r24, r10
 802:	b4 01       	movw	r22, r8
 804:	0e 94 c1 04 	call	0x982	; 0x982 <__divsf3>
 808:	9b 01       	movw	r18, r22
 80a:	ac 01       	movw	r20, r24
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	80 e8       	ldi	r24, 0x80	; 128
 812:	93 e4       	ldi	r25, 0x43	; 67
 814:	0e 94 3d 04 	call	0x87a	; 0x87a <__subsf3>
 818:	0e 94 33 05 	call	0xa66	; 0xa66 <__fixsfsi>
	
	TCNT0=0x00;
 81c:	12 be       	out	0x32, r1	; 50
	//set timer prescaler and start the timer
	TCCR0=5;
 81e:	85 e0       	ldi	r24, 0x05	; 5
 820:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
}
uint8_t delay(int delayTime){
	//create  variables needed for delay calculations
	float maxDelay,tickTime;
	int timerIntialValue,numberOfOverFlowes, overFlowCounter=0;
 822:	20 e0       	ldi	r18, 0x00	; 0
 824:	30 e0       	ldi	r19, 0x00	; 0
	 timerIntialValue = 256-((delayTime/tickTime)/numberOfOverFlowes);
	
	TCNT0=0x00;
	//set timer prescaler and start the timer
	TCCR0=5;
	while(overFlowCounter<numberOfOverFlowes){
 826:	18 c0       	rjmp	.+48     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		//set timer initial value
		TCNT0=timerIntialValue;
 828:	62 bf       	out	0x32, r22	; 50
		//wait until overflow flag set 1
		while((TIFR & (1<<0))==0){
 82a:	04 c0       	rjmp	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
			if(INT0_Flag==1){
 82c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 830:	81 30       	cpi	r24, 0x01	; 1
 832:	19 f0       	breq	.+6      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
	TCCR0=5;
	while(overFlowCounter<numberOfOverFlowes){
		//set timer initial value
		TCNT0=timerIntialValue;
		//wait until overflow flag set 1
		while((TIFR & (1<<0))==0){
 834:	08 b6       	in	r0, 0x38	; 56
 836:	00 fe       	sbrs	r0, 0
 838:	f9 cf       	rjmp	.-14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			if(INT0_Flag==1){
				break;
			}
		}
		//overflow flag set 0
		if((TIFR & (1<<0))==1){
 83a:	08 b6       	in	r0, 0x38	; 56
 83c:	00 fe       	sbrs	r0, 0
 83e:	06 c0       	rjmp	.+12     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			TIFR |= (1<<0);
 840:	88 b7       	in	r24, 0x38	; 56
 842:	81 60       	ori	r24, 0x01	; 1
 844:	88 bf       	out	0x38, r24	; 56
			break;
		}else{
			return timerError;
		} 
		//increment the overflow counter
		overFlowCounter++;
 846:	2f 5f       	subi	r18, 0xFF	; 255
 848:	3f 4f       	sbci	r19, 0xFF	; 255
 84a:	06 c0       	rjmp	.+12     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			}
		}
		//overflow flag set 0
		if((TIFR & (1<<0))==1){
			TIFR |= (1<<0);
		}else if(INT0_Flag==1){
 84c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	29 f0       	breq	.+10     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			break;
		}else{
			return timerError;
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	06 c0       	rjmp	.+12     	; 0x864 <__stack+0x5>
	 timerIntialValue = 256-((delayTime/tickTime)/numberOfOverFlowes);
	
	TCNT0=0x00;
	//set timer prescaler and start the timer
	TCCR0=5;
	while(overFlowCounter<numberOfOverFlowes){
 858:	2c 17       	cp	r18, r28
 85a:	3d 07       	cpc	r19, r29
 85c:	2c f3       	brlt	.-54     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		} 
		//increment the overflow counter
		overFlowCounter++;
	}
	//stop the timer
	TCCR0=0x00;
 85e:	13 be       	out	0x33, r1	; 51
	//set timer register to zero
	TCNT0=0x00;
 860:	12 be       	out	0x32, r1	; 50
	return timerOK;
 862:	80 e0       	ldi	r24, 0x00	; 0
}
 864:	df 91       	pop	r29
 866:	cf 91       	pop	r28
 868:	ff 90       	pop	r15
 86a:	ef 90       	pop	r14
 86c:	df 90       	pop	r13
 86e:	cf 90       	pop	r12
 870:	bf 90       	pop	r11
 872:	af 90       	pop	r10
 874:	9f 90       	pop	r9
 876:	8f 90       	pop	r8
 878:	08 95       	ret

0000087a <__subsf3>:
 87a:	50 58       	subi	r21, 0x80	; 128

0000087c <__addsf3>:
 87c:	bb 27       	eor	r27, r27
 87e:	aa 27       	eor	r26, r26
 880:	0e 94 55 04 	call	0x8aa	; 0x8aa <__addsf3x>
 884:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_round>
 888:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fp_pscA>
 88c:	38 f0       	brcs	.+14     	; 0x89c <__addsf3+0x20>
 88e:	0e 94 df 05 	call	0xbbe	; 0xbbe <__fp_pscB>
 892:	20 f0       	brcs	.+8      	; 0x89c <__addsf3+0x20>
 894:	39 f4       	brne	.+14     	; 0x8a4 <__addsf3+0x28>
 896:	9f 3f       	cpi	r25, 0xFF	; 255
 898:	19 f4       	brne	.+6      	; 0x8a0 <__addsf3+0x24>
 89a:	26 f4       	brtc	.+8      	; 0x8a4 <__addsf3+0x28>
 89c:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_nan>
 8a0:	0e f4       	brtc	.+2      	; 0x8a4 <__addsf3+0x28>
 8a2:	e0 95       	com	r30
 8a4:	e7 fb       	bst	r30, 7
 8a6:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_inf>

000008aa <__addsf3x>:
 8aa:	e9 2f       	mov	r30, r25
 8ac:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_split3>
 8b0:	58 f3       	brcs	.-42     	; 0x888 <__addsf3+0xc>
 8b2:	ba 17       	cp	r27, r26
 8b4:	62 07       	cpc	r22, r18
 8b6:	73 07       	cpc	r23, r19
 8b8:	84 07       	cpc	r24, r20
 8ba:	95 07       	cpc	r25, r21
 8bc:	20 f0       	brcs	.+8      	; 0x8c6 <__addsf3x+0x1c>
 8be:	79 f4       	brne	.+30     	; 0x8de <__addsf3x+0x34>
 8c0:	a6 f5       	brtc	.+104    	; 0x92a <__addsf3x+0x80>
 8c2:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_zero>
 8c6:	0e f4       	brtc	.+2      	; 0x8ca <__addsf3x+0x20>
 8c8:	e0 95       	com	r30
 8ca:	0b 2e       	mov	r0, r27
 8cc:	ba 2f       	mov	r27, r26
 8ce:	a0 2d       	mov	r26, r0
 8d0:	0b 01       	movw	r0, r22
 8d2:	b9 01       	movw	r22, r18
 8d4:	90 01       	movw	r18, r0
 8d6:	0c 01       	movw	r0, r24
 8d8:	ca 01       	movw	r24, r20
 8da:	a0 01       	movw	r20, r0
 8dc:	11 24       	eor	r1, r1
 8de:	ff 27       	eor	r31, r31
 8e0:	59 1b       	sub	r21, r25
 8e2:	99 f0       	breq	.+38     	; 0x90a <__addsf3x+0x60>
 8e4:	59 3f       	cpi	r21, 0xF9	; 249
 8e6:	50 f4       	brcc	.+20     	; 0x8fc <__addsf3x+0x52>
 8e8:	50 3e       	cpi	r21, 0xE0	; 224
 8ea:	68 f1       	brcs	.+90     	; 0x946 <__addsf3x+0x9c>
 8ec:	1a 16       	cp	r1, r26
 8ee:	f0 40       	sbci	r31, 0x00	; 0
 8f0:	a2 2f       	mov	r26, r18
 8f2:	23 2f       	mov	r18, r19
 8f4:	34 2f       	mov	r19, r20
 8f6:	44 27       	eor	r20, r20
 8f8:	58 5f       	subi	r21, 0xF8	; 248
 8fa:	f3 cf       	rjmp	.-26     	; 0x8e2 <__addsf3x+0x38>
 8fc:	46 95       	lsr	r20
 8fe:	37 95       	ror	r19
 900:	27 95       	ror	r18
 902:	a7 95       	ror	r26
 904:	f0 40       	sbci	r31, 0x00	; 0
 906:	53 95       	inc	r21
 908:	c9 f7       	brne	.-14     	; 0x8fc <__addsf3x+0x52>
 90a:	7e f4       	brtc	.+30     	; 0x92a <__addsf3x+0x80>
 90c:	1f 16       	cp	r1, r31
 90e:	ba 0b       	sbc	r27, r26
 910:	62 0b       	sbc	r22, r18
 912:	73 0b       	sbc	r23, r19
 914:	84 0b       	sbc	r24, r20
 916:	ba f0       	brmi	.+46     	; 0x946 <__addsf3x+0x9c>
 918:	91 50       	subi	r25, 0x01	; 1
 91a:	a1 f0       	breq	.+40     	; 0x944 <__addsf3x+0x9a>
 91c:	ff 0f       	add	r31, r31
 91e:	bb 1f       	adc	r27, r27
 920:	66 1f       	adc	r22, r22
 922:	77 1f       	adc	r23, r23
 924:	88 1f       	adc	r24, r24
 926:	c2 f7       	brpl	.-16     	; 0x918 <__addsf3x+0x6e>
 928:	0e c0       	rjmp	.+28     	; 0x946 <__addsf3x+0x9c>
 92a:	ba 0f       	add	r27, r26
 92c:	62 1f       	adc	r22, r18
 92e:	73 1f       	adc	r23, r19
 930:	84 1f       	adc	r24, r20
 932:	48 f4       	brcc	.+18     	; 0x946 <__addsf3x+0x9c>
 934:	87 95       	ror	r24
 936:	77 95       	ror	r23
 938:	67 95       	ror	r22
 93a:	b7 95       	ror	r27
 93c:	f7 95       	ror	r31
 93e:	9e 3f       	cpi	r25, 0xFE	; 254
 940:	08 f0       	brcs	.+2      	; 0x944 <__addsf3x+0x9a>
 942:	b0 cf       	rjmp	.-160    	; 0x8a4 <__addsf3+0x28>
 944:	93 95       	inc	r25
 946:	88 0f       	add	r24, r24
 948:	08 f0       	brcs	.+2      	; 0x94c <__addsf3x+0xa2>
 94a:	99 27       	eor	r25, r25
 94c:	ee 0f       	add	r30, r30
 94e:	97 95       	ror	r25
 950:	87 95       	ror	r24
 952:	08 95       	ret

00000954 <ceil>:
 954:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_trunc>
 958:	90 f0       	brcs	.+36     	; 0x97e <ceil+0x2a>
 95a:	9f 37       	cpi	r25, 0x7F	; 127
 95c:	48 f4       	brcc	.+18     	; 0x970 <ceil+0x1c>
 95e:	91 11       	cpse	r25, r1
 960:	16 f4       	brtc	.+4      	; 0x966 <ceil+0x12>
 962:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_szero>
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	80 e8       	ldi	r24, 0x80	; 128
 96c:	9f e3       	ldi	r25, 0x3F	; 63
 96e:	08 95       	ret
 970:	26 f0       	brts	.+8      	; 0x97a <ceil+0x26>
 972:	1b 16       	cp	r1, r27
 974:	61 1d       	adc	r22, r1
 976:	71 1d       	adc	r23, r1
 978:	81 1d       	adc	r24, r1
 97a:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_mintl>
 97e:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_mpack>

00000982 <__divsf3>:
 982:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__divsf3x>
 986:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_round>
 98a:	0e 94 df 05 	call	0xbbe	; 0xbbe <__fp_pscB>
 98e:	58 f0       	brcs	.+22     	; 0x9a6 <__divsf3+0x24>
 990:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fp_pscA>
 994:	40 f0       	brcs	.+16     	; 0x9a6 <__divsf3+0x24>
 996:	29 f4       	brne	.+10     	; 0x9a2 <__divsf3+0x20>
 998:	5f 3f       	cpi	r21, 0xFF	; 255
 99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x24>
 99c:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_inf>
 9a0:	51 11       	cpse	r21, r1
 9a2:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_szero>
 9a6:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_nan>

000009aa <__divsf3x>:
 9aa:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_split3>
 9ae:	68 f3       	brcs	.-38     	; 0x98a <__divsf3+0x8>

000009b0 <__divsf3_pse>:
 9b0:	99 23       	and	r25, r25
 9b2:	b1 f3       	breq	.-20     	; 0x9a0 <__divsf3+0x1e>
 9b4:	55 23       	and	r21, r21
 9b6:	91 f3       	breq	.-28     	; 0x99c <__divsf3+0x1a>
 9b8:	95 1b       	sub	r25, r21
 9ba:	55 0b       	sbc	r21, r21
 9bc:	bb 27       	eor	r27, r27
 9be:	aa 27       	eor	r26, r26
 9c0:	62 17       	cp	r22, r18
 9c2:	73 07       	cpc	r23, r19
 9c4:	84 07       	cpc	r24, r20
 9c6:	38 f0       	brcs	.+14     	; 0x9d6 <__divsf3_pse+0x26>
 9c8:	9f 5f       	subi	r25, 0xFF	; 255
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	22 0f       	add	r18, r18
 9ce:	33 1f       	adc	r19, r19
 9d0:	44 1f       	adc	r20, r20
 9d2:	aa 1f       	adc	r26, r26
 9d4:	a9 f3       	breq	.-22     	; 0x9c0 <__divsf3_pse+0x10>
 9d6:	35 d0       	rcall	.+106    	; 0xa42 <__divsf3_pse+0x92>
 9d8:	0e 2e       	mov	r0, r30
 9da:	3a f0       	brmi	.+14     	; 0x9ea <__divsf3_pse+0x3a>
 9dc:	e0 e8       	ldi	r30, 0x80	; 128
 9de:	32 d0       	rcall	.+100    	; 0xa44 <__divsf3_pse+0x94>
 9e0:	91 50       	subi	r25, 0x01	; 1
 9e2:	50 40       	sbci	r21, 0x00	; 0
 9e4:	e6 95       	lsr	r30
 9e6:	00 1c       	adc	r0, r0
 9e8:	ca f7       	brpl	.-14     	; 0x9dc <__divsf3_pse+0x2c>
 9ea:	2b d0       	rcall	.+86     	; 0xa42 <__divsf3_pse+0x92>
 9ec:	fe 2f       	mov	r31, r30
 9ee:	29 d0       	rcall	.+82     	; 0xa42 <__divsf3_pse+0x92>
 9f0:	66 0f       	add	r22, r22
 9f2:	77 1f       	adc	r23, r23
 9f4:	88 1f       	adc	r24, r24
 9f6:	bb 1f       	adc	r27, r27
 9f8:	26 17       	cp	r18, r22
 9fa:	37 07       	cpc	r19, r23
 9fc:	48 07       	cpc	r20, r24
 9fe:	ab 07       	cpc	r26, r27
 a00:	b0 e8       	ldi	r27, 0x80	; 128
 a02:	09 f0       	breq	.+2      	; 0xa06 <__divsf3_pse+0x56>
 a04:	bb 0b       	sbc	r27, r27
 a06:	80 2d       	mov	r24, r0
 a08:	bf 01       	movw	r22, r30
 a0a:	ff 27       	eor	r31, r31
 a0c:	93 58       	subi	r25, 0x83	; 131
 a0e:	5f 4f       	sbci	r21, 0xFF	; 255
 a10:	3a f0       	brmi	.+14     	; 0xa20 <__divsf3_pse+0x70>
 a12:	9e 3f       	cpi	r25, 0xFE	; 254
 a14:	51 05       	cpc	r21, r1
 a16:	78 f0       	brcs	.+30     	; 0xa36 <__divsf3_pse+0x86>
 a18:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_inf>
 a1c:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_szero>
 a20:	5f 3f       	cpi	r21, 0xFF	; 255
 a22:	e4 f3       	brlt	.-8      	; 0xa1c <__divsf3_pse+0x6c>
 a24:	98 3e       	cpi	r25, 0xE8	; 232
 a26:	d4 f3       	brlt	.-12     	; 0xa1c <__divsf3_pse+0x6c>
 a28:	86 95       	lsr	r24
 a2a:	77 95       	ror	r23
 a2c:	67 95       	ror	r22
 a2e:	b7 95       	ror	r27
 a30:	f7 95       	ror	r31
 a32:	9f 5f       	subi	r25, 0xFF	; 255
 a34:	c9 f7       	brne	.-14     	; 0xa28 <__divsf3_pse+0x78>
 a36:	88 0f       	add	r24, r24
 a38:	91 1d       	adc	r25, r1
 a3a:	96 95       	lsr	r25
 a3c:	87 95       	ror	r24
 a3e:	97 f9       	bld	r25, 7
 a40:	08 95       	ret
 a42:	e1 e0       	ldi	r30, 0x01	; 1
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	bb 1f       	adc	r27, r27
 a4c:	62 17       	cp	r22, r18
 a4e:	73 07       	cpc	r23, r19
 a50:	84 07       	cpc	r24, r20
 a52:	ba 07       	cpc	r27, r26
 a54:	20 f0       	brcs	.+8      	; 0xa5e <__divsf3_pse+0xae>
 a56:	62 1b       	sub	r22, r18
 a58:	73 0b       	sbc	r23, r19
 a5a:	84 0b       	sbc	r24, r20
 a5c:	ba 0b       	sbc	r27, r26
 a5e:	ee 1f       	adc	r30, r30
 a60:	88 f7       	brcc	.-30     	; 0xa44 <__divsf3_pse+0x94>
 a62:	e0 95       	com	r30
 a64:	08 95       	ret

00000a66 <__fixsfsi>:
 a66:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fixunssfsi>
 a6a:	68 94       	set
 a6c:	b1 11       	cpse	r27, r1
 a6e:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_szero>
 a72:	08 95       	ret

00000a74 <__fixunssfsi>:
 a74:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__fp_splitA>
 a78:	88 f0       	brcs	.+34     	; 0xa9c <__fixunssfsi+0x28>
 a7a:	9f 57       	subi	r25, 0x7F	; 127
 a7c:	98 f0       	brcs	.+38     	; 0xaa4 <__fixunssfsi+0x30>
 a7e:	b9 2f       	mov	r27, r25
 a80:	99 27       	eor	r25, r25
 a82:	b7 51       	subi	r27, 0x17	; 23
 a84:	b0 f0       	brcs	.+44     	; 0xab2 <__fixunssfsi+0x3e>
 a86:	e1 f0       	breq	.+56     	; 0xac0 <__fixunssfsi+0x4c>
 a88:	66 0f       	add	r22, r22
 a8a:	77 1f       	adc	r23, r23
 a8c:	88 1f       	adc	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	1a f0       	brmi	.+6      	; 0xa98 <__fixunssfsi+0x24>
 a92:	ba 95       	dec	r27
 a94:	c9 f7       	brne	.-14     	; 0xa88 <__fixunssfsi+0x14>
 a96:	14 c0       	rjmp	.+40     	; 0xac0 <__fixunssfsi+0x4c>
 a98:	b1 30       	cpi	r27, 0x01	; 1
 a9a:	91 f0       	breq	.+36     	; 0xac0 <__fixunssfsi+0x4c>
 a9c:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_zero>
 aa0:	b1 e0       	ldi	r27, 0x01	; 1
 aa2:	08 95       	ret
 aa4:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_zero>
 aa8:	67 2f       	mov	r22, r23
 aaa:	78 2f       	mov	r23, r24
 aac:	88 27       	eor	r24, r24
 aae:	b8 5f       	subi	r27, 0xF8	; 248
 ab0:	39 f0       	breq	.+14     	; 0xac0 <__fixunssfsi+0x4c>
 ab2:	b9 3f       	cpi	r27, 0xF9	; 249
 ab4:	cc f3       	brlt	.-14     	; 0xaa8 <__fixunssfsi+0x34>
 ab6:	86 95       	lsr	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	b3 95       	inc	r27
 abe:	d9 f7       	brne	.-10     	; 0xab6 <__fixunssfsi+0x42>
 ac0:	3e f4       	brtc	.+14     	; 0xad0 <__fixunssfsi+0x5c>
 ac2:	90 95       	com	r25
 ac4:	80 95       	com	r24
 ac6:	70 95       	com	r23
 ac8:	61 95       	neg	r22
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	08 95       	ret

00000ad2 <__floatunsisf>:
 ad2:	e8 94       	clt
 ad4:	09 c0       	rjmp	.+18     	; 0xae8 <__floatsisf+0x12>

00000ad6 <__floatsisf>:
 ad6:	97 fb       	bst	r25, 7
 ad8:	3e f4       	brtc	.+14     	; 0xae8 <__floatsisf+0x12>
 ada:	90 95       	com	r25
 adc:	80 95       	com	r24
 ade:	70 95       	com	r23
 ae0:	61 95       	neg	r22
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255
 ae4:	8f 4f       	sbci	r24, 0xFF	; 255
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	99 23       	and	r25, r25
 aea:	a9 f0       	breq	.+42     	; 0xb16 <__floatsisf+0x40>
 aec:	f9 2f       	mov	r31, r25
 aee:	96 e9       	ldi	r25, 0x96	; 150
 af0:	bb 27       	eor	r27, r27
 af2:	93 95       	inc	r25
 af4:	f6 95       	lsr	r31
 af6:	87 95       	ror	r24
 af8:	77 95       	ror	r23
 afa:	67 95       	ror	r22
 afc:	b7 95       	ror	r27
 afe:	f1 11       	cpse	r31, r1
 b00:	f8 cf       	rjmp	.-16     	; 0xaf2 <__floatsisf+0x1c>
 b02:	fa f4       	brpl	.+62     	; 0xb42 <__floatsisf+0x6c>
 b04:	bb 0f       	add	r27, r27
 b06:	11 f4       	brne	.+4      	; 0xb0c <__floatsisf+0x36>
 b08:	60 ff       	sbrs	r22, 0
 b0a:	1b c0       	rjmp	.+54     	; 0xb42 <__floatsisf+0x6c>
 b0c:	6f 5f       	subi	r22, 0xFF	; 255
 b0e:	7f 4f       	sbci	r23, 0xFF	; 255
 b10:	8f 4f       	sbci	r24, 0xFF	; 255
 b12:	9f 4f       	sbci	r25, 0xFF	; 255
 b14:	16 c0       	rjmp	.+44     	; 0xb42 <__floatsisf+0x6c>
 b16:	88 23       	and	r24, r24
 b18:	11 f0       	breq	.+4      	; 0xb1e <__floatsisf+0x48>
 b1a:	96 e9       	ldi	r25, 0x96	; 150
 b1c:	11 c0       	rjmp	.+34     	; 0xb40 <__floatsisf+0x6a>
 b1e:	77 23       	and	r23, r23
 b20:	21 f0       	breq	.+8      	; 0xb2a <__floatsisf+0x54>
 b22:	9e e8       	ldi	r25, 0x8E	; 142
 b24:	87 2f       	mov	r24, r23
 b26:	76 2f       	mov	r23, r22
 b28:	05 c0       	rjmp	.+10     	; 0xb34 <__floatsisf+0x5e>
 b2a:	66 23       	and	r22, r22
 b2c:	71 f0       	breq	.+28     	; 0xb4a <__floatsisf+0x74>
 b2e:	96 e8       	ldi	r25, 0x86	; 134
 b30:	86 2f       	mov	r24, r22
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	60 e0       	ldi	r22, 0x00	; 0
 b36:	2a f0       	brmi	.+10     	; 0xb42 <__floatsisf+0x6c>
 b38:	9a 95       	dec	r25
 b3a:	66 0f       	add	r22, r22
 b3c:	77 1f       	adc	r23, r23
 b3e:	88 1f       	adc	r24, r24
 b40:	da f7       	brpl	.-10     	; 0xb38 <__floatsisf+0x62>
 b42:	88 0f       	add	r24, r24
 b44:	96 95       	lsr	r25
 b46:	87 95       	ror	r24
 b48:	97 f9       	bld	r25, 7
 b4a:	08 95       	ret

00000b4c <__fp_inf>:
 b4c:	97 f9       	bld	r25, 7
 b4e:	9f 67       	ori	r25, 0x7F	; 127
 b50:	80 e8       	ldi	r24, 0x80	; 128
 b52:	70 e0       	ldi	r23, 0x00	; 0
 b54:	60 e0       	ldi	r22, 0x00	; 0
 b56:	08 95       	ret

00000b58 <__fp_mintl>:
 b58:	88 23       	and	r24, r24
 b5a:	71 f4       	brne	.+28     	; 0xb78 <__fp_mintl+0x20>
 b5c:	77 23       	and	r23, r23
 b5e:	21 f0       	breq	.+8      	; 0xb68 <__fp_mintl+0x10>
 b60:	98 50       	subi	r25, 0x08	; 8
 b62:	87 2b       	or	r24, r23
 b64:	76 2f       	mov	r23, r22
 b66:	07 c0       	rjmp	.+14     	; 0xb76 <__fp_mintl+0x1e>
 b68:	66 23       	and	r22, r22
 b6a:	11 f4       	brne	.+4      	; 0xb70 <__fp_mintl+0x18>
 b6c:	99 27       	eor	r25, r25
 b6e:	0d c0       	rjmp	.+26     	; 0xb8a <__fp_mintl+0x32>
 b70:	90 51       	subi	r25, 0x10	; 16
 b72:	86 2b       	or	r24, r22
 b74:	70 e0       	ldi	r23, 0x00	; 0
 b76:	60 e0       	ldi	r22, 0x00	; 0
 b78:	2a f0       	brmi	.+10     	; 0xb84 <__fp_mintl+0x2c>
 b7a:	9a 95       	dec	r25
 b7c:	66 0f       	add	r22, r22
 b7e:	77 1f       	adc	r23, r23
 b80:	88 1f       	adc	r24, r24
 b82:	da f7       	brpl	.-10     	; 0xb7a <__fp_mintl+0x22>
 b84:	88 0f       	add	r24, r24
 b86:	96 95       	lsr	r25
 b88:	87 95       	ror	r24
 b8a:	97 f9       	bld	r25, 7
 b8c:	08 95       	ret

00000b8e <__fp_mpack>:
 b8e:	9f 3f       	cpi	r25, 0xFF	; 255
 b90:	31 f0       	breq	.+12     	; 0xb9e <__fp_mpack_finite+0xc>

00000b92 <__fp_mpack_finite>:
 b92:	91 50       	subi	r25, 0x01	; 1
 b94:	20 f4       	brcc	.+8      	; 0xb9e <__fp_mpack_finite+0xc>
 b96:	87 95       	ror	r24
 b98:	77 95       	ror	r23
 b9a:	67 95       	ror	r22
 b9c:	b7 95       	ror	r27
 b9e:	88 0f       	add	r24, r24
 ba0:	91 1d       	adc	r25, r1
 ba2:	96 95       	lsr	r25
 ba4:	87 95       	ror	r24
 ba6:	97 f9       	bld	r25, 7
 ba8:	08 95       	ret

00000baa <__fp_nan>:
 baa:	9f ef       	ldi	r25, 0xFF	; 255
 bac:	80 ec       	ldi	r24, 0xC0	; 192
 bae:	08 95       	ret

00000bb0 <__fp_pscA>:
 bb0:	00 24       	eor	r0, r0
 bb2:	0a 94       	dec	r0
 bb4:	16 16       	cp	r1, r22
 bb6:	17 06       	cpc	r1, r23
 bb8:	18 06       	cpc	r1, r24
 bba:	09 06       	cpc	r0, r25
 bbc:	08 95       	ret

00000bbe <__fp_pscB>:
 bbe:	00 24       	eor	r0, r0
 bc0:	0a 94       	dec	r0
 bc2:	12 16       	cp	r1, r18
 bc4:	13 06       	cpc	r1, r19
 bc6:	14 06       	cpc	r1, r20
 bc8:	05 06       	cpc	r0, r21
 bca:	08 95       	ret

00000bcc <__fp_round>:
 bcc:	09 2e       	mov	r0, r25
 bce:	03 94       	inc	r0
 bd0:	00 0c       	add	r0, r0
 bd2:	11 f4       	brne	.+4      	; 0xbd8 <__fp_round+0xc>
 bd4:	88 23       	and	r24, r24
 bd6:	52 f0       	brmi	.+20     	; 0xbec <__fp_round+0x20>
 bd8:	bb 0f       	add	r27, r27
 bda:	40 f4       	brcc	.+16     	; 0xbec <__fp_round+0x20>
 bdc:	bf 2b       	or	r27, r31
 bde:	11 f4       	brne	.+4      	; 0xbe4 <__fp_round+0x18>
 be0:	60 ff       	sbrs	r22, 0
 be2:	04 c0       	rjmp	.+8      	; 0xbec <__fp_round+0x20>
 be4:	6f 5f       	subi	r22, 0xFF	; 255
 be6:	7f 4f       	sbci	r23, 0xFF	; 255
 be8:	8f 4f       	sbci	r24, 0xFF	; 255
 bea:	9f 4f       	sbci	r25, 0xFF	; 255
 bec:	08 95       	ret

00000bee <__fp_split3>:
 bee:	57 fd       	sbrc	r21, 7
 bf0:	90 58       	subi	r25, 0x80	; 128
 bf2:	44 0f       	add	r20, r20
 bf4:	55 1f       	adc	r21, r21
 bf6:	59 f0       	breq	.+22     	; 0xc0e <__fp_splitA+0x10>
 bf8:	5f 3f       	cpi	r21, 0xFF	; 255
 bfa:	71 f0       	breq	.+28     	; 0xc18 <__fp_splitA+0x1a>
 bfc:	47 95       	ror	r20

00000bfe <__fp_splitA>:
 bfe:	88 0f       	add	r24, r24
 c00:	97 fb       	bst	r25, 7
 c02:	99 1f       	adc	r25, r25
 c04:	61 f0       	breq	.+24     	; 0xc1e <__fp_splitA+0x20>
 c06:	9f 3f       	cpi	r25, 0xFF	; 255
 c08:	79 f0       	breq	.+30     	; 0xc28 <__fp_splitA+0x2a>
 c0a:	87 95       	ror	r24
 c0c:	08 95       	ret
 c0e:	12 16       	cp	r1, r18
 c10:	13 06       	cpc	r1, r19
 c12:	14 06       	cpc	r1, r20
 c14:	55 1f       	adc	r21, r21
 c16:	f2 cf       	rjmp	.-28     	; 0xbfc <__fp_split3+0xe>
 c18:	46 95       	lsr	r20
 c1a:	f1 df       	rcall	.-30     	; 0xbfe <__fp_splitA>
 c1c:	08 c0       	rjmp	.+16     	; 0xc2e <__fp_splitA+0x30>
 c1e:	16 16       	cp	r1, r22
 c20:	17 06       	cpc	r1, r23
 c22:	18 06       	cpc	r1, r24
 c24:	99 1f       	adc	r25, r25
 c26:	f1 cf       	rjmp	.-30     	; 0xc0a <__fp_splitA+0xc>
 c28:	86 95       	lsr	r24
 c2a:	71 05       	cpc	r23, r1
 c2c:	61 05       	cpc	r22, r1
 c2e:	08 94       	sec
 c30:	08 95       	ret

00000c32 <__fp_trunc>:
 c32:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__fp_splitA>
 c36:	a0 f0       	brcs	.+40     	; 0xc60 <__fp_trunc+0x2e>
 c38:	be e7       	ldi	r27, 0x7E	; 126
 c3a:	b9 17       	cp	r27, r25
 c3c:	88 f4       	brcc	.+34     	; 0xc60 <__fp_trunc+0x2e>
 c3e:	bb 27       	eor	r27, r27
 c40:	9f 38       	cpi	r25, 0x8F	; 143
 c42:	60 f4       	brcc	.+24     	; 0xc5c <__fp_trunc+0x2a>
 c44:	16 16       	cp	r1, r22
 c46:	b1 1d       	adc	r27, r1
 c48:	67 2f       	mov	r22, r23
 c4a:	78 2f       	mov	r23, r24
 c4c:	88 27       	eor	r24, r24
 c4e:	98 5f       	subi	r25, 0xF8	; 248
 c50:	f7 cf       	rjmp	.-18     	; 0xc40 <__fp_trunc+0xe>
 c52:	86 95       	lsr	r24
 c54:	77 95       	ror	r23
 c56:	67 95       	ror	r22
 c58:	b1 1d       	adc	r27, r1
 c5a:	93 95       	inc	r25
 c5c:	96 39       	cpi	r25, 0x96	; 150
 c5e:	c8 f3       	brcs	.-14     	; 0xc52 <__fp_trunc+0x20>
 c60:	08 95       	ret

00000c62 <__fp_zero>:
 c62:	e8 94       	clt

00000c64 <__fp_szero>:
 c64:	bb 27       	eor	r27, r27
 c66:	66 27       	eor	r22, r22
 c68:	77 27       	eor	r23, r23
 c6a:	cb 01       	movw	r24, r22
 c6c:	97 f9       	bld	r25, 7
 c6e:	08 95       	ret

00000c70 <_exit>:
 c70:	f8 94       	cli

00000c72 <__stop_program>:
 c72:	ff cf       	rjmp	.-2      	; 0xc72 <__stop_program>
